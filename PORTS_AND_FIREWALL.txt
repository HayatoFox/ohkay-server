# PORTS ET FIREWALL CONFIGURATION

## Ports utilisés (tous < 8191)

### Backend
- **8100** : API REST + Socket.io (TCP)

### Frontend  
- **8101** : Vite dev server (dev uniquement, pas en production)

### Base de données (internes Docker, pas exposés)
- PostgreSQL : 5432 (pas d'exposition externe)

## Ports à ouvrir sur AlmaLinux

### ENTRANT (depuis internet)
```bash
8100/tcp  # Backend API + WebSocket (obligatoire)
22/tcp    # SSH admin (obligatoire pour gestion serveur)
```

### SORTANT (vers internet) 
```bash
53/tcp,udp   # DNS (résolution noms de domaine)
80/tcp       # HTTP (dnf/yum update)
443/tcp      # HTTPS (dnf/yum update, git clone, npm)
123/udp      # NTP (synchronisation horloge)
```

## Scripts firewall fournis

### 1. firewall-setup.sh (Recommandé)
Configuration standard avec rate limiting.

```bash
sudo chmod +x firewall-setup.sh
sudo ./firewall-setup.sh
```

**Autorise :**
- SSH (3 tentatives/min)
- Port 8100 (100 req/min)
- Sortant : DNS, HTTP, HTTPS, NTP
- Connexions établies

### 2. firewall-strict.sh (Sécurité maximale)
Configuration très stricte, bloque TOUT sauf explicite.

```bash
sudo chmod +x firewall-strict.sh
sudo ./firewall-strict.sh
```

**Bloque en plus :**
- Tout trafic sortant non autorisé
- Ping (ICMP)
- Scans de ports
- Paquets NULL

## Vérification

```bash
# État firewall
sudo firewall-cmd --state

# Ports ouverts
sudo firewall-cmd --list-ports

# Services actifs
sudo firewall-cmd --list-services

# Toutes les règles
sudo firewall-cmd --list-all

# Logs (si problème)
sudo journalctl -u firewalld -f
```

## Production checklist

- [ ] Utiliser reverse proxy (Nginx/Caddy) sur port 80/443 avec SSL
- [ ] Ne PAS exposer port 8101 en production
- [ ] Installer Fail2Ban pour protection SSH
- [ ] Changer tous les mots de passe par défaut (.env)
- [ ] Limiter accès SSH par IP si possible
- [ ] Activer monitoring (Prometheus/Grafana)
- [ ] Sauvegardes automatiques base de données

## Notes importantes

1. **Port 8100** doit être accessible depuis internet pour que les clients puissent se connecter
2. **PostgreSQL (5432)** reste interne au réseau Docker, jamais exposé
3. **En production**, mettre un reverse proxy devant le port 8100
4. **WebSocket** (Socket.io) fonctionne sur le même port que l'API (8100)
5. **CORS** doit être configuré dans .env : `CORS_ORIGIN=https://votre-domaine.com`

## Commandes utiles AlmaLinux

```bash
# Appliquer une règle manuellement
sudo firewall-cmd --permanent --add-port=8100/tcp
sudo firewall-cmd --reload

# Supprimer une règle
sudo firewall-cmd --permanent --remove-port=8100/tcp
sudo firewall-cmd --reload

# Bloquer une IP
sudo firewall-cmd --permanent --add-rich-rule='rule family=ipv4 source address=IP.IP.IP.IP reject'

# Rate limiting custom
sudo firewall-cmd --permanent --add-rich-rule='rule port port=8100 protocol=tcp limit value=50/m accept'

# Voir les connexions actives
sudo ss -tunap | grep :8100
```
